version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: blockshelf_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-blockshelf}
      POSTGRES_USER: ${POSTGRES_USER:-blockshelf}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # Mount backup directory
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-blockshelf}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blockshelf_network

  # Redis Cache (optional, for production caching)
  redis:
    image: redis:7-alpine
    container_name: blockshelf_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blockshelf_network

  # BlockShelf Django Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blockshelf_web
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Django settings
      DEBUG: ${DEBUG:-False}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:?DJANGO_SECRET_KEY must be set}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-}

      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-blockshelf}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-blockshelf}

      # Redis cache configuration
      REDIS_URL: redis://redis:6379/0

      # Gunicorn configuration
      GUNICORN_BIND: 0.0.0.0:8000
      GUNICORN_WORKERS: ${GUNICORN_WORKERS:-4}
      GUNICORN_WORKER_CLASS: ${GUNICORN_WORKER_CLASS:-sync}
      GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT:-60}
      GUNICORN_LOG_LEVEL: ${GUNICORN_LOG_LEVEL:-info}

      # Sentry monitoring (optional)
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-production}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-0.1}

      # Email configuration (optional)
      EMAIL_BACKEND: ${EMAIL_BACKEND:-django.core.mail.backends.console.EmailBackend}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:-noreply@blockshelf.local}

      # Security settings
      SECURE_SSL_REDIRECT: ${SECURE_SSL_REDIRECT:-False}
      SESSION_COOKIE_SECURE: ${SESSION_COOKIE_SECURE:-False}
      CSRF_COOKIE_SECURE: ${CSRF_COOKIE_SECURE:-False}
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      - 8000
    networks:
      - blockshelf_network
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput --clear &&
             gunicorn --config gunicorn.conf.py blockshelf_inventory.wsgi:application"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: blockshelf_nginx
    restart: unless-stopped
    depends_on:
      - web
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL certificates (if using HTTPS)
    networks:
      - blockshelf_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/inventory/health/liveness/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    name: blockshelf_postgres_data
  redis_data:
    name: blockshelf_redis_data
  static_volume:
    name: blockshelf_static
  media_volume:
    name: blockshelf_media

networks:
  blockshelf_network:
    name: blockshelf_network
    driver: bridge
